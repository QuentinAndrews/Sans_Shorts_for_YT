// ==UserScript==
// @name         Sans Shorts For YouTubeâ„¢ 
// @namespace    http://tampermonkey.net/
// @version      0.03
// @description  Removes Youtube Shorts
// @author       Quentin Andrews
// @namespace   https://github.com/rotemdan
// @homepageURL https://github.com/rotemdan/MaximizerForYouTube
// @match        https://*.youtube.com/*
// @match        https://m.youtube.com/*
// @grant       none
// @license      GNU GPLv3
// ==/UserScript==

(function () {
  'use strict';
  // JSON Configuration
  const config = [
  {
    "filter_type": "element",
    "config": {
      "keywords": "",
      "phrase": "",
      "element": {
        "elementName": "yt-formatted-string",
        "attributes": {
          "id": "",
          "class": "title style-scope ytd-guide-entry-renderer"
        },
        "elementInnerHtml": ["Shorts", "Originals","YouTube Music","Trending"]
      },
      "action": "seek_and_destroy",
      "seek_and_destroy_config": {
        "elementName": "TP-YT-PAPER-ITEM",
        "attributes": {
          "class": "style-scope ytd-guide-entry-renderer"
        },
        "action": "displayNone"
      }
    }
  },
  {
    "filter_type": "element",
    "config": {
      "keywords": "",
      "phrase": "",
      "element": {
        "elementName": "SPAN",
        "attributes": {
          "id": "title",
          "class": "style-scope ytd-reel-shelf-renderer"
        },
        "elementInnerHtml": ["Shorts"],
        "action": "displayNone"
      },
      "action": "seek_and_destroy",
      "seek_and_destroy_config": {
        "elementName": "div",
        "attributes": {
          "class": "style-scope ytd-reel-shelf-renderer"
        },
        "action": "displayNone"
      }
    }
  }
];

  // Function to check all classes
  function hasAllClasses(element, classes) {
    return classes.every(cls => element.classList.contains(cls));
  }

  class Observer {
    constructor(config) {
      this.config = config;
      this.matchedTags = new Set();
    }

    matchTag(tag) {
      if (!this.matchedTags.has(tag)) {
        this.matchedTags.add(tag);
      }

      const targetElements = this.config.element.attributes.class.split(' ').map(x => x.trim());

      // Perform the desired action on matching the tag
      if (hasAllClasses(tag, targetElements)) {
         // Check if the tag or any of its descendants contain the desired text
         if(this.containsDesiredText(tag)){
            // tag.parentNode.parentNode.style.display = "none";
            SeekAndDestroy(tag, this.config.seek_and_destroy_config);
         }
      }
    }
    containsDesiredText(element) {
      if(this.config.element.elementInnerHtml.includes(element.textContent.trim())){
        return true;
      }

      for(let child of element.children){
        if(this.containsDesiredText(child)){
          return true;
        }
      }

      return false;
    }
  }

  function findMatchingElements(filterConfig) {
    const targetElements = filterConfig.element.attributes.class.split(' ').map(x => x.trim());
    const elements = document.querySelectorAll(`${filterConfig.element.elementName}.${targetElements.join('.')}`);
    for (const element of elements) {
      filterConfig.observerInstance.matchTag(element);
    }
  }

  function SeekAndDestroy(element, config) {
      console.log(element);
    if (!element) {
      return null;
    }

    const isTagMatch = config.elementName ? element.tagName.toLowerCase() === config.elementName.toLowerCase() : true;
    const isIdMatch = config.attributes.id ? element.id === config.attributes.id : true;
    const isClassMatch = config.attributes.class ? config.attributes.class.split(' ').every(cls => element.classList.contains(cls)) : true;

  if (isTagMatch && isIdMatch && isClassMatch) {
    if (config.action === 'displayNone') {
      element.parentNode.style.display = 'none'; // Hide the parent element
    }
    return element;
  }

    return SeekAndDestroy(element.parentNode, config);
  }

  for (const filter of config) {
    filter.observerInstance = new Observer(filter.config);
    findMatchingElements(filter.config);
  }

const mutationObserver = new MutationObserver((mutationsList, observer) => {
  for (const mutation of mutationsList) {
    if (mutation.type === 'childList') {
      for (const addedNode of mutation.addedNodes) {
        for (const filter of config) {
          if (filter.config.element.elementName === addedNode.tagName?.toLowerCase()) {
              console.log("Node Found" + addedNode);
            setTimeout(() => filter.observerInstance.matchTag(addedNode), 5);
          }
        }
        // Check if the added node has any children and observe them
        if (addedNode.hasChildNodes()) {
          observer.observe(addedNode, { childList: true, subtree: true });
        }
      }
    }
  }
});

mutationObserver.observe(document.body, { childList: true, subtree: true, attributes: true, attributeFilter: ['style'] });

})();
